version: '3.3'

networks:
  backend:

services:
  nsqlookupd:
    image: nsqio/nsq:latest
    entrypoint: nsqlookupd
    ports:
      - "4160:4160"
      - "4161:4161"
    networks:
      backend:

  nsqd:
    image: nsqio/nsq:latest
    entrypoint: ["nsqd", "--lookupd-tcp-address=nsqlookupd:4160"]
    ports:
      - "4150:4150"
      - "4151:4151"
    networks:
      backend:

  memcached:
    image: memcached:latest
    command: memcached -vv
    networks:
      backend:

  nsqadmin:
    image: nsqio/nsq:latest
    entrypoint: ["nsqadmin", "--lookupd-http-address=nsqlookupd:4161"]
    networks:
      backend:
    ports:
      - "4171:4171"

  nsqcli:
    image: nsqio/nsq:latest
    command: ["nsq_tail","-lookupd-http-address","nsqlookupd:4161","-topic","sensors"]
    networks:
      backend:
    deploy:
        restart_policy:
            condition: on-failure

#################################################
  local_manager:
    build:
      context: ./
      dockerfile: Dockerfile.amd64
    image: montreal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/montreal.json:/app/montreal.json
      - ./config/local_configuration.json:/app/local_configuration.json
    networks:
      backend:
    tty: true
    environment:
      CONFIG: ./montreal.json
      SERVICE: "local_manager"

#################################################
  raw_memcache_writer:
    build:
      context: ./
      dockerfile: Dockerfile.amd64
    image: montreal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/montreal.json:/app/montreal.json
    networks:
      backend:
    tty: true
    environment:
      CONFIG: ./montreal.json
      SERVICE: "raw_memcache_writer"
#################################################
  #web:
  #  build:
  #    context: ./
  #    dockerfile: Dockerfile.amd64
  #  image: montreal
  #  networks:
  #    backend:
  #  tty: true
  #  ports:
  #    - "5000:5000"
  #  environment:
  #    SERVICE: "prtgweb"

#################################################
  #prtg:
  #  build:
  #    context: ./
  #    dockerfile: Dockerfile.amd64
  #  image: montreal
  #  networks:
  #    backend:
  #  tty: true
  #  environment:
  #    SERVICE: "prtgconvert"

  #json:
  #  build:
  #    context: ./
  #    dockerfile: Dockerfile.amd64
  #  image: montreal
  #  networks:
  #    backend:
  #  tty: true
  #  environment:
  #    SERVICE: "rawjson"

#################################################
  #prtgregister:
  #  build:
  #    context: ./
  #    dockerfile: Dockerfile.amd64
  #  image: montreal
  #  networks:
  #    backend:
  #  tty: true
  #  environment:
  #    SERVICE: "prtgregister"

  #list:
  #  build:
  #    context: ./
  #    dockerfile: Dockerfile.amd64
  #  image: montreal
  #  networks:
  #    backend:
  #  tty: true
  #  environment:
  #    SERVICE: "sensorlist"
